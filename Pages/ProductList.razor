@page "/ProductList"
@inject ProductsService ProductsService
@using BlazorApp1.Models  <!-- Correct namespace -->

<h3>Product List</h3>

@if (isLoading)
{
    <p>Loading...</p>
}
else if (products == null || products.Count == 0)
{
    <p>No products found.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Price</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr>
                    <td>@product.Id</td>
                    <td>@product.Name</td>
                    <td>@product.Price</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Product> products;  // Correct type for the list
    private bool isLoading = true;    // Flag to check if the data is still loading
    private bool isInitialized = false;  // Prevent repeated initialization

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !isInitialized)
        {
            try
            {
                Console.WriteLine("Initializing product load...");

                // Fetch products asynchronously
                products = await ProductsService.GetProductsAsync();

                // Mark loading as done
                isLoading = false;

                // Check if no products were fetched
                if (products == null || products.Count == 0)
                {
                    Console.WriteLine("No products found.");
                }
                else
                {
                    Console.WriteLine($"Successfully loaded {products.Count} products.");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error during product loading: {ex.Message}");
                isLoading = false; // Set loading to false if error occurs
            }
            finally
            {
                isInitialized = true; // Prevent future re-initialization
            }

            // Ensure the UI updates after fetching data
            StateHasChanged();
        }
    }
}
